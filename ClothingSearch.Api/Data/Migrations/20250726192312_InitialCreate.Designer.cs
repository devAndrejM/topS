// <auto-generated />
using System;
using ClothingSearch.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClothingSearch.Api.Data.Migrations
{
    [DbContext(typeof(ClothingSearchContext))]
    [Migration("20250726192312_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClothingSearch.Api.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2025, 7, 26, 19, 23, 10, 968, DateTimeKind.Utc).AddTicks(2339),
                            Currency = "EUR",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2025, 7, 26, 19, 23, 10, 968, DateTimeKind.Utc).AddTicks(2481),
                            Currency = "EUR",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2025, 7, 26, 19, 23, 10, 968, DateTimeKind.Utc).AddTicks(2482),
                            Currency = "USD",
                            Name = "United States"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2025, 7, 26, 19, 23, 10, 968, DateTimeKind.Utc).AddTicks(2483),
                            Currency = "GBP",
                            Name = "United Kingdom"
                        });
                });

            modelBuilder.Entity("ClothingSearch.Api.Models.SearchAnalytics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ResultCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Query");

                    b.HasIndex("Timestamp");

                    b.ToTable("SearchAnalytics");
                });

            modelBuilder.Entity("ClothingSearch.Api.Models.SearchCache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Results")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("[]");

                    b.Property<string>("SearchQuery")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("StoreId");

                    b.HasIndex("SearchQuery", "Category", "StoreId");

                    b.ToTable("SearchCaches");
                });

            modelBuilder.Entity("ClothingSearch.Api.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Config")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("{}");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProviderType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Config = "{\"affiliateTag\":\"your-tag\",\"region\":\"US\"}",
                            CountryId = 3,
                            Created = new DateTime(2025, 7, 26, 19, 23, 10, 968, DateTimeKind.Utc).AddTicks(7859),
                            IsActive = true,
                            Name = "Amazon",
                            ProviderType = "affiliate"
                        },
                        new
                        {
                            Id = 2,
                            Config = "{\"affiliateId\":\"your-id\",\"region\":\"DE\"}",
                            CountryId = 2,
                            Created = new DateTime(2025, 7, 26, 19, 23, 10, 968, DateTimeKind.Utc).AddTicks(8024),
                            IsActive = true,
                            Name = "Zalando",
                            ProviderType = "affiliate"
                        },
                        new
                        {
                            Id = 3,
                            Config = "{\"baseUrl\":\"https://www.hervis.hr\",\"searchPath\":\"/search\"}",
                            CountryId = 1,
                            Created = new DateTime(2025, 7, 26, 19, 23, 10, 968, DateTimeKind.Utc).AddTicks(8026),
                            IsActive = true,
                            Name = "Hervis",
                            ProviderType = "scraping"
                        });
                });

            modelBuilder.Entity("ClothingSearch.Api.Models.UserSetting", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClothingSize")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("ShoeSize")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ShoeSizeSystem")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.HasIndex("CountryId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("ClothingSearch.Api.Models.SearchCache", b =>
                {
                    b.HasOne("ClothingSearch.Api.Models.Store", "Store")
                        .WithMany("SearchCaches")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ClothingSearch.Api.Models.Store", b =>
                {
                    b.HasOne("ClothingSearch.Api.Models.Country", "Country")
                        .WithMany("Stores")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ClothingSearch.Api.Models.UserSetting", b =>
                {
                    b.HasOne("ClothingSearch.Api.Models.Country", "Country")
                        .WithMany("UserSettings")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ClothingSearch.Api.Models.Country", b =>
                {
                    b.Navigation("Stores");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("ClothingSearch.Api.Models.Store", b =>
                {
                    b.Navigation("SearchCaches");
                });
#pragma warning restore 612, 618
        }
    }
}
